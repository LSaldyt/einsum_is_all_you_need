import numpy as np

class Tensor(np.ndarray):
    def __neg__(self):             return anp.negative(self)
    def __add__(self, other):      return anp.add(     self, other)
    def __sub__(self, other):      return anp.subtract(self, other)
    def __mul__(self, other):      return anp.multiply(self, other)
    def __pow__(self, other):      return anp.power   (self, other)
    def __div__(self, other):      return anp.divide(  self, other)
    def __mod__(self, other):      return anp.mod(     self, other)
    def __truediv__(self, other):  return anp.true_divide(self, other)
    def __matmul__(self, other):   return anp.matmul(self, other)
    def __radd__(self, other):     return anp.add(     other, self)
    def __rsub__(self, other):     return anp.subtract(other, self)
    def __rmul__(self, other):     return anp.multiply(other, self)
    def __rpow__(self, other):     return anp.power(   other, self)
    def __rdiv__(self, other):     return anp.divide(  other, self)
    def __rmod__(self, other):     return anp.mod(     other, self)
    def __rtruediv__(self, other): return anp.true_divide(other, self)
    def __rmatmul__(self, other):  return anp.matmul(other, self)
    def __eq__(self, other):       return anp.equal(self, other)
    def __ne__(self, other):       return anp.not_equal(self, other)
    def __gt__(self, other):       return anp.greater(self, other)
    def __ge__(self, other):       return anp.greater_equal(self, other)
    def __lt__(self, other):       return anp.less(self, other)
    def __le__(self, other):       return anp.less_equal(self, other)
    def __abs__(self):             return anp.abs(self)
    def __hash__(self):            return id(self)
